{
    "manifests": {
        "scheb/2fa-bundle": {
            "manifest": {
                "bundles": {
                    "Scheb\\TwoFactorBundle\\SchebTwoFactorBundle": [
                        "all"
                    ]
                },
                "copy-from-recipe": {
                    "config/": "%CONFIG_DIR%/"
                }
            },
            "files": {
                "config/packages/scheb_2fa.yaml": {
                    "contents": [
                        "# See the configuration reference at https://symfony.com/bundles/SchebTwoFactorBundle/6.x/configuration.html",
                        "scheb_two_factor:",
                        "    two_factor_condition: Infrastructure\\Authentication\\Symfony\\Security\\TwoFactorCondition",
                        "    security_tokens:",
                        "        - Symfony\\Component\\Security\\Core\\Authentication\\Token\\UsernamePasswordToken",
                        "        - Symfony\\Component\\Security\\Http\\Authenticator\\Token\\PostAuthenticationToken",
                        "",
                        "    # Trusted device feature",
                        "    trusted_device:",
                        "        enabled: true",
                        "        lifetime: 604800",
                        "        extend_lifetime: false",
                        "        cookie_name: _devscast_trusted_device",
                        "        cookie_secure: auto",
                        "        cookie_same_site: \"lax\"",
                        "        cookie_path: \"/\"",
                        "",
                        "    # Backup codes feature",
                        "    backup_codes:",
                        "        enabled: true",
                        "",
                        "    # Email authentication config",
                        "    # email:",
                        "    #     enabled: true",
                        "    #     mailer: Infrastructure\\Authentication\\Symfony\\Mailer\\TwoFactorEmailCodeMailer",
                        "    #     sender_email: noreply@devscast.org",
                        "    #     sender_name: Devscast Community",
                        "    #     digits: 6",
                        "    #     template: '@app/domain/authentication/login_two_factor.html.twig'",
                        "",
                        "    # Google Authenticator config",
                        "    # google:",
                        "    #     enabled: true",
                        "    #     server_name: devscast.org",
                        "    #     issuer: Devscast Community",
                        "    #     digits: 6",
                        "    #     window: 1",
                        "    #     template: '@app/domain/authentication/login_two_factor.html.twig'",
                        ""
                    ],
                    "executable": false
                },
                "config/routes/scheb_2fa.yaml": {
                    "contents": [
                        "authentication_2fa_login:",
                        "    path: /login/2fa",
                        "    defaults:",
                        "        _controller: \"scheb_two_factor.form_controller::form\"",
                        "",
                        "authentication_2fa_check:",
                        "    path: /login/2fa_check",
                        ""
                    ],
                    "executable": false
                },
                "src/Application/Command/ExportBackupCodeCommand.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "namespace Application\\Authentication\\Command;",
                        "",
                        "use Domain\\Authentication\\Entity\\User;",
                        "",
                        "/**",
                        " * Class ExportBackupCodeCommand.",
                        " *",
                        " * @author bernard-ng <bernard@devscast.tech>",
                        " */",
                        "final class ExportBackupCodeCommand",
                        "{",
                        "    public function __construct(",
                        "        public readonly User $user,",
                        "    ) {",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "src/Application/Command/GenerateBackupCodeCommand.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "namespace Application\\Authentication\\Command;",
                        "",
                        "use Domain\\Authentication\\Entity\\User;",
                        "",
                        "/**",
                        " * Class GenerateBackupCodeCommand.",
                        " *",
                        " * @author bernard-ng <bernard@devscast.tech>",
                        " */",
                        "final class GenerateBackupCodeCommand",
                        "{",
                        "    public function __construct(",
                        "        public readonly User $user",
                        "    ) {",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "src/Application/Command/GenerateGoogleAuthenticatorSecretCommand.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "namespace Application\\Authentication\\Command;",
                        "",
                        "use Domain\\Authentication\\Entity\\User;",
                        "",
                        "/**",
                        " * Class GenerateGoogleSecretCommand.",
                        " *",
                        " * @author bernard-ng <bernard@devscast.tech>",
                        " */",
                        "final class GenerateGoogleAuthenticatorSecretCommand",
                        "{",
                        "    public function __construct(",
                        "        public readonly User $user",
                        "    ) {",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "src/Application/Command/ResendTwoFactorCodeCommand.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "namespace Application\\Authentication\\Command;",
                        "",
                        "use Domain\\Authentication\\Entity\\User;",
                        "",
                        "/**",
                        " * Class ResendTwoFactorCodeCommand.",
                        " *",
                        " * @author bernard-ng <bernard@devscast.tech>",
                        " */",
                        "final class ResendTwoFactorCodeCommand",
                        "{",
                        "    public function __construct(",
                        "        public readonly string $ip,",
                        "        public readonly User $user",
                        "    ) {",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "src/Application/Command/ToggleTwoFactorCommand.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "namespace Application\\Authentication\\Command;",
                        "",
                        "use Domain\\Authentication\\Entity\\User;",
                        "",
                        "final class ToggleTwoFactorCommand",
                        "{",
                        "    public function __construct(",
                        "        public readonly User $user,",
                        "        public bool $google = false,",
                        "        public bool $email = false,",
                        "    ) {",
                        "        $this->google = $user->isGoogleAuthenticatorEnabled();",
                        "        $this->email = $user->isEmailAuthEnabled();",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "src/Application/Handler/ExportBackupCodeHandler.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "namespace Application\\Authentication\\Handler;",
                        "",
                        "use Application\\Authentication\\Command\\ExportBackupCodeCommand;",
                        "use Application\\Authentication\\Command\\GenerateBackupCodeCommand;",
                        "use Symfony\\Component\\Messenger\\Attribute\\AsMessageHandler;",
                        "use Symfony\\Component\\Messenger\\MessageBusInterface;",
                        "",
                        "/**",
                        " * Class ExportBackupCodeHandler.",
                        " *",
                        " * @author bernard-ng <bernard@devscast.tech>",
                        " */",
                        "#[AsMessageHandler]",
                        "final class ExportBackupCodeHandler",
                        "{",
                        "    public function __construct(",
                        "        private readonly MessageBusInterface $commandBus",
                        "    ) {",
                        "    }",
                        "",
                        "    public function __invoke(ExportBackupCodeCommand $command): string",
                        "    {",
                        "        $user = $command->user;",
                        "        if (0 === count($user->getBackupCodes())) {",
                        "            $this->commandBus->dispatch(new GenerateBackupCodeCommand($user));",
                        "        }",
                        "",
                        "        return implode(\"\\n\", $user->getBackupCodes());",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "src/Application/Handler/GenerateBackupCodeHandler.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "namespace Application\\Authentication\\Handler;",
                        "",
                        "use Application\\Authentication\\Command\\GenerateBackupCodeCommand;",
                        "use Domain\\Authentication\\Repository\\UserRepositoryInterface;",
                        "use Symfony\\Component\\Messenger\\Attribute\\AsMessageHandler;",
                        "",
                        "/**",
                        " * Class GenerateBackupCodeHandler.",
                        " *",
                        " * @author bernard-ng <bernard@devscast.tech>",
                        " */",
                        "#[AsMessageHandler]",
                        "final class GenerateBackupCodeHandler",
                        "{",
                        "    public function __construct(",
                        "        private readonly UserRepositoryInterface $repository",
                        "    ) {",
                        "    }",
                        "",
                        "    public function __invoke(GenerateBackupCodeCommand $command): void",
                        "    {",
                        "        $user = $command->user;",
                        "        $codes = [];",
                        "        for ($i = 0; $i <= 5; ++$i) {",
                        "            $codes[$i] = $this->generateCode();",
                        "        }",
                        "",
                        "        $user->setBackupCodes($codes);",
                        "        $this->repository->save($user);",
                        "    }",
                        "",
                        "    private function generateCode(): int",
                        "    {",
                        "        try {",
                        "            return \\random_int(10 ** (6 - 1), 10 ** 6 - 1);",
                        "        } catch (\\Throwable) {",
                        "            return rand(100000, 999999);",
                        "        }",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "src/Application/Handler/GenerateGoogleAuthenticatorSecretHandler.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "namespace Application\\Authentication\\Handler;",
                        "",
                        "use Application\\Authentication\\Command\\GenerateGoogleAuthenticatorSecretCommand;",
                        "use Domain\\Authentication\\Repository\\UserRepositoryInterface;",
                        "use Scheb\\TwoFactorBundle\\Security\\TwoFactor\\Provider\\Google\\GoogleAuthenticatorInterface;",
                        "use Symfony\\Component\\Messenger\\Attribute\\AsMessageHandler;",
                        "",
                        "/**",
                        " * Class GenerateGoogleAuthenticatorSecretHandler.",
                        " *",
                        " * @author bernard-ng <bernard@devscast.tech>",
                        " */",
                        "#[AsMessageHandler]",
                        "final class GenerateGoogleAuthenticatorSecretHandler",
                        "{",
                        "    public function __construct(",
                        "        private readonly UserRepositoryInterface $repository,",
                        "        private readonly GoogleAuthenticatorInterface $authenticator",
                        "    ) {",
                        "    }",
                        "",
                        "    public function __invoke(GenerateGoogleAuthenticatorSecretCommand $command): void",
                        "    {",
                        "        $user = $command->user;",
                        "        $secret = $this->authenticator->generateSecret();",
                        "",
                        "        $user->setGoogleAuthSecret($secret);",
                        "        $this->repository->save($user);",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "src/Application/Handler/ResendTwoFactorCodeHandler.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "namespace Application\\Authentication\\Handler;",
                        "",
                        "use Application\\Authentication\\Command\\ResendTwoFactorCodeCommand;",
                        "use Scheb\\TwoFactorBundle\\Security\\TwoFactor\\Provider\\Email\\Generator\\CodeGeneratorInterface;",
                        "use Symfony\\Component\\Messenger\\Attribute\\AsMessageHandler;",
                        "use Symfony\\Component\\RateLimiter\\Exception\\RateLimitExceededException;",
                        "use Symfony\\Component\\RateLimiter\\RateLimiterFactory;",
                        "",
                        "/**",
                        " * Class ResendTwoFactorCodeHandler.",
                        " *",
                        " * @author bernard-ng <bernard@devscast.tech>",
                        " */",
                        "#[AsMessageHandler]",
                        "final class ResendTwoFactorCodeHandler",
                        "{",
                        "    public function __construct(",
                        "        private readonly CodeGeneratorInterface $codeGenerator,",
                        "        private readonly RateLimiterFactory $resendTwoFactorCodeLimiter",
                        "    ) {",
                        "    }",
                        "",
                        "    /**",
                        "     * @throws RateLimitExceededException",
                        "     */",
                        "    public function __invoke(ResendTwoFactorCodeCommand $command): void",
                        "    {",
                        "        $limiter = $this->resendTwoFactorCodeLimiter->create($command->ip);",
                        "        $limiter->consume()->ensureAccepted();",
                        "        $this->codeGenerator->generateAndSend($command->user);",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "src/Application/Handler/ToggleTwoFactorHandler.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "namespace Application\\Authentication\\Handler;",
                        "",
                        "use Application\\Authentication\\Command\\ToggleTwoFactorCommand;",
                        "use Domain\\Authentication\\Event\\TwoFactorDisabledEvent;",
                        "use Domain\\Authentication\\Event\\TwoFactorEnabledEvent;",
                        "use Domain\\Authentication\\Repository\\UserRepositoryInterface;",
                        "use Psr\\EventDispatcher\\EventDispatcherInterface;",
                        "use Symfony\\Component\\Messenger\\Attribute\\AsMessageHandler;",
                        "",
                        "/**",
                        " * Class ToggleTwoFactorHandler.",
                        " *",
                        " * @author bernard-ng <bernard@devscast.tech>",
                        " */",
                        "#[AsMessageHandler]",
                        "final class ToggleTwoFactorHandler",
                        "{",
                        "    public function __construct(",
                        "        private readonly UserRepositoryInterface $repository,",
                        "        private readonly EventDispatcherInterface $dispatcher",
                        "    ) {",
                        "    }",
                        "",
                        "    public function __invoke(ToggleTwoFactorCommand $command): void",
                        "    {",
                        "        $user = $command->user;",
                        "        $status = $user->isTwoFactorEnabled();",
                        "",
                        "        $command->email ? $user->enableEmailAuthCode() : $user->disableEmailAuthCode();",
                        "        $command->google ? $user->enableGoogleAuthenticator() : $user->disableGoogleAuthenticator();",
                        "        $this->repository->save($user);",
                        "",
                        "        if (false === $user->isTwoFactorEnabled() && $user->isTwoFactorEnabled() !== $status) {",
                        "            $this->dispatcher->dispatch(new TwoFactorDisabledEvent($user));",
                        "        }",
                        "",
                        "        if (true === $user->isTwoFactorEnabled() && $user->isTwoFactorEnabled() !== $status) {",
                        "            $this->dispatcher->dispatch(new TwoFactorEnabledEvent($user));",
                        "        }",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "src/Infrastructure/Authentication/Controller/LoginTwoFactorController.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "namespace Infrastructure\\Authentication\\Symfony\\Controller;",
                        "",
                        "use Application\\Authentication\\Command\\ResendTwoFactorCodeCommand;",
                        "use Domain\\Authentication\\Entity\\User;",
                        "use Infrastructure\\Shared\\Symfony\\Controller\\AbstractController;",
                        "use Symfony\\Component\\HttpFoundation\\Request;",
                        "use Symfony\\Component\\HttpFoundation\\Response;",
                        "use Symfony\\Component\\RateLimiter\\Exception\\RateLimitExceededException;",
                        "use Symfony\\Component\\Routing\\Annotation\\Route;",
                        "use Symfony\\Component\\Security\\Core\\Security;",
                        "",
                        "/**",
                        " * Class Login2FaController.",
                        " *",
                        " * @author bernard-ng <bernard@devscast.tech>",
                        " */",
                        "final class LoginTwoFactorController extends AbstractController",
                        "{",
                        "    #[Route('/login/2fa_resend_code', name: 'authentication_2fa_resend_code', methods: ['POST', 'GET'])]",
                        "    public function resend(Request $request, Security $security): Response",
                        "    {",
                        "        try {",
                        "            /** @var User|null $user */",
                        "            $user = $security->getToken()?->getUser();",
                        "",
                        "            if (null !== $user) {",
                        "                $this->dispatchSync(new ResendTwoFactorCodeCommand((string) $request->getClientIp(), $user));",
                        "                $this->addSuccessFlash(",
                        "                    id: 'authentication.flashes.resend_code_requested_successfully',",
                        "                    domain: 'authentication'",
                        "                );",
                        "            }",
                        "        } catch (RateLimitExceededException) {",
                        "            $this->addErrorFlash(",
                        "                id: 'authentication.flashes.too_many_resend_code_request',",
                        "                domain: 'authentication'",
                        "            );",
                        "        } catch (\\Throwable $e) {",
                        "            $this->addSafeMessageExceptionFlash($e);",
                        "        }",
                        "",
                        "        return $this->redirectSeeOther('app_index');",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "src/Infrastructure/Authentication/Controller/Setting/BackupCodeController.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "namespace Infrastructure\\Authentication\\Symfony\\Controller\\Setting;",
                        "",
                        "use Application\\Authentication\\Command\\ExportBackupCodeCommand;",
                        "use Application\\Authentication\\Command\\GenerateBackupCodeCommand;",
                        "use Domain\\Authentication\\Entity\\User;",
                        "use Infrastructure\\Shared\\Symfony\\Controller\\AbstractController;",
                        "use Symfony\\Component\\HttpFoundation\\HeaderUtils;",
                        "use Symfony\\Component\\HttpFoundation\\Response;",
                        "use Symfony\\Component\\Routing\\Annotation\\Route;",
                        "",
                        "/**",
                        " * Class BackupCodeSettingController.",
                        " *",
                        " * @author bernard-ng <bernard@devscast.tech>",
                        " */",
                        "#[Route('/profile/authentication/settings/backup_codes', name: 'authentication_setting_backup_codes_')]",
                        "final class BackupCodeController extends AbstractController",
                        "{",
                        "    #[Route('', name: 'index', methods: ['GET', 'POST'])]",
                        "    public function index(): Response",
                        "    {",
                        "        /** @var User $user */",
                        "        $user = $this->getUser();",
                        "",
                        "        if (empty($user->getBackupCodes())) {",
                        "            try {",
                        "                $this->dispatchSync(new GenerateBackupCodeCommand($user));",
                        "            } catch (\\Throwable $e) {",
                        "                $this->addSafeMessageExceptionFlash($e);",
                        "            }",
                        "        }",
                        "",
                        "        return $this->render(",
                        "            view: '@app/domain/authentication/setting/backup_code.html.twig',",
                        "            parameters: [",
                        "                'codes' => $user->getBackupCodes(),",
                        "            ]",
                        "        );",
                        "    }",
                        "",
                        "    #[Route('/regenerate', name: 'regenerate', methods: ['POST'])]",
                        "    public function regenerate(): Response",
                        "    {",
                        "        /** @var User $user */",
                        "        $user = $this->getUser();",
                        "",
                        "        try {",
                        "            $this->dispatchSync(new GenerateBackupCodeCommand($user));",
                        "        } catch (\\Throwable $e) {",
                        "            $this->addSafeMessageExceptionFlash($e);",
                        "        }",
                        "",
                        "        return $this->redirectSeeOther('authentication_setting_backup_codes_index');",
                        "    }",
                        "",
                        "    #[Route('/export', name: 'export', methods: ['GET', 'POST'])]",
                        "    public function export(): Response",
                        "    {",
                        "        /** @var User $user */",
                        "        $user = $this->getUser();",
                        "",
                        "        try {",
                        "            $content = $this->getHandledResultSync(new ExportBackupCodeCommand($user));",
                        "            $response = new Response(strval($content));",
                        "            $response->headers->set('Content-Disposition', HeaderUtils::makeDisposition(",
                        "                disposition: HeaderUtils::DISPOSITION_ATTACHMENT,",
                        "                filename: 'devscast_backup_code.txt'",
                        "            ));",
                        "",
                        "            return $response;",
                        "        } catch (\\Throwable $e) {",
                        "            $this->addSafeMessageExceptionFlash($e);",
                        "        }",
                        "",
                        "        return $this->redirectSeeOther('authentication_setting_backup_codes_index');",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "src/Infrastructure/Authentication/Controller/Setting/TwoFactorController.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "namespace Infrastructure\\Authentication\\Symfony\\Controller\\Setting;",
                        "",
                        "use Application\\Authentication\\Command\\GenerateGoogleAuthenticatorSecretCommand;",
                        "use Application\\Authentication\\Command\\ToggleTwoFactorCommand;",
                        "use Domain\\Authentication\\Entity\\User;",
                        "use Infrastructure\\Authentication\\Symfony\\Form\\Setting\\ToggleTwoFactorForm;",
                        "use Infrastructure\\Shared\\Symfony\\Controller\\AbstractController;",
                        "use Scheb\\TwoFactorBundle\\Security\\TwoFactor\\Provider\\Google\\GoogleAuthenticatorInterface;",
                        "use Symfony\\Component\\HttpFoundation\\Request;",
                        "use Symfony\\Component\\HttpFoundation\\Response;",
                        "use Symfony\\Component\\Routing\\Annotation\\Route;",
                        "",
                        "/**",
                        " * Class TwoFactorSettingController.",
                        " *",
                        " * @author bernard-ng <bernard@devscast.tech>",
                        " */",
                        "#[Route('/profile/authentication/settings/2fa', name: 'authentication_setting_2fa_')]",
                        "final class TwoFactorController extends AbstractController",
                        "{",
                        "    #[Route('', name: 'index', methods: ['GET', 'POST'])]",
                        "    public function index(Request $request, GoogleAuthenticatorInterface $authenticator): Response",
                        "    {",
                        "        /** @var User $user */",
                        "        $user = $this->getUser();",
                        "        $user = $this->setupTwoFactorSecrets($user);",
                        "        $qrcode = $authenticator->getQRContent($user);",
                        "",
                        "        $command = new ToggleTwoFactorCommand($user);",
                        "        $form = $this->createForm(ToggleTwoFactorForm::class, $command);",
                        "        $form->handleRequest($request);",
                        "",
                        "        if ($form->isSubmitted() && $form->isValid()) {",
                        "            try {",
                        "                $this->dispatchSync($command);",
                        "                $this->addSuccessFlash(",
                        "                    id: 'authentication.flashes.2fa_settings_updated_successfully',",
                        "                    domain: 'authentication'",
                        "                );",
                        "            } catch (\\Throwable $e) {",
                        "                $this->addSafeMessageExceptionFlash($e);",
                        "            }",
                        "        }",
                        "",
                        "        return $this->renderForm(",
                        "            view: '@app/domain/authentication/setting/two_factor.html.twig',",
                        "            parameters: [",
                        "                'form' => $form,",
                        "                'qrcode_content' => $qrcode,",
                        "            ]",
                        "        );",
                        "    }",
                        "",
                        "    private function setupTwoFactorSecrets(User $user): User",
                        "    {",
                        "        if (empty($user->getGoogleAuthenticatorSecret())) {",
                        "            try {",
                        "                $this->dispatchSync(new GenerateGoogleAuthenticatorSecretCommand($user));",
                        "            } catch (\\Throwable $e) {",
                        "                $this->addSafeMessageExceptionFlash($e);",
                        "            }",
                        "        }",
                        "",
                        "        return $user;",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "src/Infrastructure/Authentication/Security/TwoFactorCondition.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "namespace Infrastructure\\Authentication\\Symfony\\Security;",
                        "",
                        "use Scheb\\TwoFactorBundle\\Security\\TwoFactor\\AuthenticationContextInterface;",
                        "use Scheb\\TwoFactorBundle\\Security\\TwoFactor\\Condition\\TwoFactorConditionInterface;",
                        "use Symfony\\Component\\Security\\Http\\Authenticator\\Passport\\SelfValidatingPassport;",
                        "",
                        "/**",
                        " * Class TwoFactorCondition.",
                        " * To avoid doing a 2fa check when the user connects with a link login.",
                        " *",
                        " * @author bernard-ng <bernard@devscast.tech>",
                        " */",
                        "final class TwoFactorCondition implements TwoFactorConditionInterface",
                        "{",
                        "    public function shouldPerformTwoFactorAuthentication(AuthenticationContextInterface $context): bool",
                        "    {",
                        "        if ($context->getPassport() instanceof SelfValidatingPassport) {",
                        "            return false;",
                        "        }",
                        "",
                        "        return true;",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                }
            },
            "ref": "8282f8e422c5e5d304a8564a8a36a937a1da75e1"
        }
    }
}
