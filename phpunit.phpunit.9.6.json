{
    "manifests": {
        "phpunit/phpunit": {
            "manifest": {
                "copy-from-recipe": {
                    ".env.test": ".env.test",
                    "phpunit.xml.dist": "phpunit.xml.dist",
                    "tests/": "tests/"
                },
                "gitignore": [
                    "/phpunit.xml",
                    ".phpunit.result.cache"
                ],
                "post-install-output": [
                    "  * installed from devscast"
                ]
            },
            "files": {
                ".env.test": {
                    "contents": [
                        "# define your env variables for the test env here",
                        "KERNEL_CLASS='Infrastructure\\Shared\\Symfony\\Kernel'",
                        "APP_SECRET='$ecretf0rt3st'",
                        "SYMFONY_DEPRECATIONS_HELPER=999999",
                        "PANTHER_APP_ENV=panther",
                        "PANTHER_ERROR_SCREENSHOT_DIR=./var/error-screenshots",
                        "#DATABASE_URL=\"mysql://root:test@devscast_databasetest:3306/devscast?serverVersion=10.7.3-MariaDB&chartset=utf8\"",
                        ""
                    ],
                    "executable": false
                },
                "phpunit.xml.dist": {
                    "contents": [
                        "<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                        "",
                        "<!-- https://phpunit.readthedocs.io/en/latest/configuration.html -->",
                        "<phpunit xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"",
                        "         xsi:noNamespaceSchemaLocation=\"vendor/phpunit/phpunit/phpunit.xsd\"",
                        "         backupGlobals=\"false\"",
                        "         colors=\"true\"",
                        "         bootstrap=\"tests/bootstrap.php\"",
                        "         convertDeprecationsToExceptions=\"false\"",
                        ">",
                        "    <php>",
                        "        <ini name=\"display_errors\" value=\"1\" />",
                        "        <ini name=\"error_reporting\" value=\"-1\" />",
                        "        <server name=\"APP_ENV\" value=\"test\" force=\"true\" />",
                        "        <server name=\"SHELL_VERBOSITY\" value=\"-1\" />",
                        "        <server name=\"SYMFONY_PHPUNIT_REMOVE\" value=\"\" />",
                        "        <server name=\"SYMFONY_PHPUNIT_VERSION\" value=\"9.5\" />",
                        "    </php>",
                        "",
                        "    <testsuites>",
                        "        <testsuite name=\"Project Test Suite\">",
                        "            <directory>tests</directory>",
                        "        </testsuite>",
                        "    </testsuites>",
                        "",
                        "    <coverage processUncoveredFiles=\"true\">",
                        "        <include>",
                        "            <directory suffix=\".php\">src</directory>",
                        "        </include>",
                        "    </coverage>",
                        "",
                        "    <listeners>",
                        "        <listener class=\"Symfony\\Bridge\\PhpUnit\\SymfonyTestsListener\" />",
                        "    </listeners>",
                        "",
                        "<!--    <extensions>-->",
                        "<!--        <extension class=\"Symfony\\Component\\Panther\\ServerExtension\" />-->",
                        "<!--    </extensions>-->",
                        "</phpunit>",
                        ""
                    ],
                    "executable": false
                },
                "tests/Application/.gitignore": {
                    "contents": [
                        ""
                    ],
                    "executable": false
                },
                "tests/Domain/.gitignore": {
                    "contents": [
                        ""
                    ],
                    "executable": false
                },
                "tests/FixturesTrait.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "namespace Tests;",
                        "",
                        "use Fidry\\AliceDataFixtures\\LoaderInterface;",
                        "",
                        "/**",
                        " * Trait FixturesTrait.",
                        " *",
                        " * @author bernard-ng <bernard@devscast.tech>",
                        " */",
                        "trait FixturesTrait",
                        "{",
                        "    /**",
                        "     * Charge une s\u00e9rie de fixture en base de donn\u00e9e et ajoute les entit\u00e9s \u00e0 l'EntityManager.",
                        "     *",
                        "     * @param array<string> $fixtures",
                        "     *",
                        "     * @return array<string,object>",
                        "     */",
                        "    public function loadFixtures(array $fixtures): array",
                        "    {",
                        "        $fixturePath = $this->getFixturesPath();",
                        "        $files = array_map(fn ($fixture) => PathHelper::join($fixturePath, $fixture . '.yaml'), $fixtures);",
                        "        /** @var LoaderInterface $loader */",
                        "        $loader = static::getContainer()->get('fidry_alice_data_fixtures.loader.doctrine');",
                        "",
                        "        return $loader->load($files);",
                        "    }",
                        "",
                        "    public function getFixturesPath(): string",
                        "    {",
                        "        return __DIR__ . '/fixtures/';",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "tests/Infrastructure/.gitignore": {
                    "contents": [
                        ""
                    ],
                    "executable": false
                },
                "tests/KernelTestCase.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "namespace Tests;",
                        "",
                        "use Doctrine\\ORM\\EntityManagerInterface;",
                        "use Symfony\\Bundle\\FrameworkBundle\\KernelBrowser;",
                        "",
                        "/**",
                        " * Class KernelTestCase.",
                        " *",
                        " * @author bernard-ng <bernard@devscast.tech>",
                        " */",
                        "class KernelTestCase extends \\Symfony\\Bundle\\FrameworkBundle\\Test\\KernelTestCase",
                        "{",
                        "    protected KernelBrowser $client;",
                        "    protected EntityManagerInterface $em;",
                        "",
                        "    protected function setUp(): void",
                        "    {",
                        "        self::bootKernel();",
                        "        $this->em = self::getContainer()->get(EntityManagerInterface::class);",
                        "        parent::setUp();",
                        "    }",
                        "",
                        "    public function remove(object $entity): void",
                        "    {",
                        "        $this->em->remove($this->em->getRepository($entity::class)->find($entity->getId()));",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "tests/PathHelper.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "namespace Tests;",
                        "",
                        "/**",
                        " * Class PathHelper.",
                        " *",
                        " * @author bernard-ng <bernard@devscast.tech>",
                        " */",
                        "final class PathHelper",
                        "{",
                        "    public static function join(string ...$parts): string",
                        "    {",
                        "        return preg_replace(",
                        "            pattern: '~[/\\\\\\\\]+~',",
                        "            replacement: DIRECTORY_SEPARATOR,",
                        "            subject: implode(DIRECTORY_SEPARATOR, $parts)",
                        "        ) ?: '';",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "tests/RepositoryTestCase.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "namespace Tests;",
                        "",
                        "use Doctrine\\Bundle\\DoctrineBundle\\Repository\\ServiceEntityRepository;",
                        "",
                        "/**",
                        " * Class RepositoryTestCase.",
                        " *",
                        " * @author bernard-ng <bernard@devscast.tech>",
                        " */",
                        "class RepositoryTestCase extends KernelTestCase",
                        "{",
                        "    protected ?ServiceEntityRepository $repository = null;",
                        "    protected ?string $repositoryClass = null;",
                        "",
                        "    protected function setUp(): void",
                        "    {",
                        "        parent::setUp();",
                        "        $this->repository = self::getContainer()->get($this->repositoryClass);",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "tests/WebTestCase.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "namespace Tests;",
                        "",
                        "use Doctrine\\ORM\\EntityManagerInterface;",
                        "use Symfony\\Bundle\\FrameworkBundle\\KernelBrowser;",
                        "use Symfony\\Component\\Security\\Core\\User\\UserInterface;",
                        "use Symfony\\Component\\Security\\Csrf\\TokenStorage\\TokenStorageInterface;",
                        "",
                        "/**",
                        " * Class WebTestCase.",
                        " *",
                        " * @author bernard-ng <bernard@devscast.tech>",
                        " */",
                        "class WebTestCase extends \\Symfony\\Bundle\\FrameworkBundle\\Test\\WebTestCase",
                        "{",
                        "    protected KernelBrowser $client;",
                        "    protected EntityManagerInterface $em;",
                        "",
                        "    /**",
                        "     * @author bernard-ng <bernard@devscast.tech>",
                        "     */",
                        "    protected function setUp(): void",
                        "    {",
                        "        $this->client = self::createClient();",
                        "        /** @var EntityManagerInterface $em */",
                        "        $em = self::getContainer()->get(EntityManagerInterface::class);",
                        "        $this->em = $em;",
                        "        parent::setUp();",
                        "    }",
                        "",
                        "    /**",
                        "     * @author bernard-ng <bernard@devscast.tech>",
                        "     */",
                        "    protected function tearDown(): void",
                        "    {",
                        "        $this->em->clear();",
                        "        parent::tearDown();",
                        "    }",
                        "",
                        "    /**",
                        "     * @author bernard-ng <bernard@devscast.tech>",
                        "     */",
                        "    public function jsonRequest(string $method, string $url, ?array $data = null): string",
                        "    {",
                        "        $this->client->request($method, $url, [], [], [",
                        "            'CONTENT_TYPE' => 'application/json',",
                        "            'HTTP_Accept' => 'application/json',",
                        "        ], $data ? json_encode($data, JSON_THROW_ON_ERROR) : null);",
                        "",
                        "        return $this->client->getResponse()->getContent();",
                        "    }",
                        "",
                        "    /**",
                        "     * V\u00e9rifie si on a un message d'erreur.",
                        "     */",
                        "    public function expectErrorAlert(): void",
                        "    {",
                        "        $this->assertEquals(",
                        "            1,",
                        "            $this->client",
                        "                ->getCrawler()",
                        "                ->filter('div[type=\"error\"], app-toast[type=\"error\"]')",
                        "                ->count(),",
                        "            'Error Alert mismatch'",
                        "        );",
                        "    }",
                        "",
                        "    /**",
                        "     * V\u00e9rifie si on a un message de succ\u00e8s.",
                        "     */",
                        "    public function expectSuccessAlert(): void",
                        "    {",
                        "        $this->assertEquals(",
                        "            1,",
                        "            $this->client",
                        "                ->getCrawler()",
                        "                ->filter('div[type=\"success\"], app-toast[type=\"success\"]')",
                        "                ->count(),",
                        "            'Success Alert mismatch'",
                        "        );",
                        "    }",
                        "",
                        "    /**",
                        "     * @author bernard-ng <bernard@devscast.tech>",
                        "     */",
                        "    public function expectFormErrors(?int $expectedErrors = null): void",
                        "    {",
                        "        if (null === $expectedErrors) {",
                        "            $this->assertTrue(",
                        "                $this->client",
                        "                    ->getCrawler()",
                        "                    ->filter('.form-error-message')",
                        "                    ->count() > 0,",
                        "                'Form errors mismatch.'",
                        "            );",
                        "        } else {",
                        "            $this->assertEquals(",
                        "                $expectedErrors,",
                        "                $this->client",
                        "                    ->getCrawler()",
                        "                    ->filter('.form-error-message')",
                        "                    ->count(),",
                        "                'Form errors mismatch.'",
                        "            );",
                        "        }",
                        "    }",
                        "",
                        "    /**",
                        "     * @author bernard-ng <bernard@devscast.tech>",
                        "     */",
                        "    public function expectH1(string $title): void",
                        "    {",
                        "        $crawler = $this->client->getCrawler();",
                        "        $this->assertEquals(",
                        "            $title,",
                        "            $crawler->filter('h1')->text(),",
                        "            '<h1> mismatch'",
                        "        );",
                        "    }",
                        "",
                        "    /**",
                        "     * @author bernard-ng <bernard@devscast.tech>",
                        "     */",
                        "    public function expectTitle(string $title): void",
                        "    {",
                        "        $crawler = $this->client->getCrawler();",
                        "        $this->assertEquals(",
                        "            $title . ' | Devscast Community',",
                        "            $crawler->filter('title')->text(),",
                        "            '<title> mismatch',",
                        "        );",
                        "    }",
                        "",
                        "    /**",
                        "     * @author bernard-ng <bernard@devscast.tech>",
                        "     */",
                        "    public function login(?UserInterface $user)",
                        "    {",
                        "        if (null === $user) {",
                        "            return;",
                        "        }",
                        "        $this->client->loginUser($user);",
                        "    }",
                        "",
                        "    /**",
                        "     * @author bernard-ng <bernard@devscast.tech>",
                        "     */",
                        "    public function setCsrf(string $key): string",
                        "    {",
                        "        $csrf = uniqid();",
                        "        self::getContainer()->get(TokenStorageInterface::class)->setToken($key, $csrf);",
                        "",
                        "        return $csrf;",
                        "    }",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "tests/bootstrap.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "use Symfony\\Component\\Dotenv\\Dotenv;",
                        "",
                        "require dirname(__DIR__) . '/vendor/autoload.php';",
                        "",
                        "if (file_exists(dirname(__DIR__) . '/config/bootstrap.php')) {",
                        "    require dirname(__DIR__) . '/config/bootstrap.php';",
                        "} elseif (method_exists(Dotenv::class, 'bootEnv')) {",
                        "    (new Dotenv())->bootEnv(dirname(__DIR__) . '/.env');",
                        "}",
                        ""
                    ],
                    "executable": false
                },
                "tests/fixtures/.gitignore": {
                    "contents": [
                        ""
                    ],
                    "executable": false
                },
                "tests/object-manager.php": {
                    "contents": [
                        "<?php",
                        "",
                        "declare(strict_types=1);",
                        "",
                        "use Infrastructure\\Shared\\Symfony\\Kernel;",
                        "use Symfony\\Component\\Dotenv\\Dotenv;",
                        "",
                        "require __DIR__ . '/../vendor/autoload.php';",
                        "",
                        "(new Dotenv())->bootEnv(__DIR__ . '/../.env');",
                        "",
                        "$kernel = new Kernel($_SERVER['APP_ENV'], (bool) $_SERVER['APP_DEBUG']);",
                        "$kernel->boot();",
                        "",
                        "return $kernel->getContainer()->get('doctrine')->getManager();",
                        ""
                    ],
                    "executable": false
                }
            },
            "ref": "1b83e9b517c1964d22c805c6447caee5f0e5190c"
        }
    }
}
